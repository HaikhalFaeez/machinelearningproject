# -*- coding: utf-8 -*-
"""Project 9 - Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E4OLERiliaItTEwm1v9MGN-od_-xsx3k

1.  To predict the calories burnt by considerating the various health aspects - Regression Problem
2.  ML Model - XGBoost Regressor Model (Supervised ML)
3.  Work Flow

    *   Collect Calories Burnt Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis
    *   Data Visualization
    *   Train-Test Split
    *   Machine Learning Training - XGBoost Regressor Model (Supervise ML)

Import the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics
from xgboost import XGBRegressor

"""Data Collection & Pre-Processing"""

calories_data = pd.read_csv('/content/calories.csv')

calories_data.head()

exercise_data = pd.read_csv('/content/exercise.csv')

exercise_data.head()

#combining two dataframe

combined_data = pd.concat([exercise_data, calories_data['Calories']], axis = 1)

combined_data.head()

combined_data.shape

combined_data.info()

combined_data.isnull().sum()

"""Data Analysis"""

combined_data.describe()

"""Data Visualization"""

sns.set()

#plotting the gender column in count plot

sns.countplot(combined_data['Gender'])

#plotting the distribution of age

sns.distplot(combined_data['Age'])

#plotting the distribution of height

sns.distplot(combined_data['Height'])

#plotting the distribution of weight

sns.distplot(combined_data['Weight'])

#finding the correlation in the dataset

correlation = combined_data.corr()

#constructing a heat map to understand the correlation

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

#converting the text data to numerical values

combined_data.replace({'Gender' : {'male' : 0, 'female' : 1}}, inplace = True)

combined_data.head()

X = combined_data.drop(columns = ['User_ID', 'Calories'], axis = 1)
Y = combined_data['Calories']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - XGBoost Regressor Model"""

model = XGBRegressor()

model.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy on training data

train_data_prediction = model.predict(X_train)
accuracy_train_data = metrics.mean_absolute_error(Y_train, train_data_prediction)
print(accuracy_train_data)

#accuracy on test data

test_data_prediction = model.predict(X_test)
accuracy_test_data = metrics.mean_absolute_error(Y_test, test_data_prediction)
print(accuracy_test_data)