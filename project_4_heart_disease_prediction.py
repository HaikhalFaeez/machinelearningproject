# -*- coding: utf-8 -*-
"""Project 4 - Heart Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NXBa1-89lUEzNDxxFVZf01CMP6OugObD

1.  To detect whether the person has a heart disease or not (healthy or defective) - Binary Classification Problem
2.  ML Model - Logistic Regression Model (Supervised ML)
3.  Work Flow
  *   Collect Heart Disease Data - Kaggle Dataset
  *   Data Pre-Processing
  *   Train-Test Split
  *   Machine Learning Training - Logistic Regression Model (Supervised ML)
  *   Develop Prediction System - Feed new data to the trained model to predict the heart condition
  *   Saving the Trained Model in .sav File

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Pre-Processing"""

heart_data = pd.read_csv('/content/heart.csv')

heart_data.head()

heart_data.tail()

heart_data.shape

# get the information on the data

heart_data.info()

heart_data.isnull().sum()

# statistical measure about the data

heart_data.describe()

# checking the distribution of target variable

heart_data['target'].value_counts()

"""1 --> Defect Heart

0 --> Healthy Heart
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - Logistic Regression Model"""

model = LogisticRegression()

# training the logistic regression model with training data

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on the training data

X_train_prediction = model.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print(X_train_accuracy)

# accuracy on the training data

X_test_prediction = model.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print(X_test_accuracy)

"""Making A Predictive System"""

input_data = (71,0,0,112,149,0,1,125,0,1.6,1,0,2)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance (1 data point)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Predictive system
prediction = model.predict(input_data_reshaped)
print (prediction)

if (prediction[0]==0):
  print('The person does not have heart disease')
else:
  print('The person have heart disease')

"""Saving the Trained Model"""

import pickle

filename = 'heart_model.sav'

pickle.dump(model, open(filename, 'wb'))

loaded_model = pickle.load(open('heart_model.sav', 'rb'))

input_data = (71,0,0,112,149,0,1,125,0,1.6,1,0,2)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print('The person does not have heart disease')
else:
  print('The person have heart disease')