# -*- coding: utf-8 -*-
"""Project 7 - Big Mart Sales Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c0b4BIfiFvovPuJ5NxzTK95tbB7A_RzC

1.  To determine the sales prediction in a several big mart - Regression Problem
2.  ML Model - XGBoost Regression Model (Supervised ML)
3.  Work Flow
    *   Collect Big Mart Sales Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis
    *   Train-Test Split
    *   Machine Learning Training - XGBoost Regression Model (Supervised ML)

Import the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data Collection & Pre-Processing"""

mart_data = pd.read_csv('/content/train.csv')

mart_data.head()

mart_data.shape

mart_data.info()

"""Categorical Features

- Item_Identifier
- Item_Fat_Content
- Item_Type
- Outlet_Identifier
- Outlet_Size
- Outlet_Location_Type
- Outlet_Type
"""

mart_data.isnull().sum()

"""Handling Missing Values

- Mean --> average value (suitable for numerical data)
- Mode --> most repeated value (suitable for textual/categorical data)
"""

#mean value of Item_Weight column

mart_data['Item_Weight'].mean()

#filling missing values in Item_Weight column with mean value

mart_data['Item_Weight'].fillna(mart_data['Item_Weight'].mean(), inplace = True) #inplace - replace the missing value in the whole dataset and not only in this code

mart_data.isnull().sum()

#replacing the missing value in Outlet_Size with mode value for categorical data

outlet_size_mode = mart_data.pivot_table(values = 'Outlet_Size', columns = 'Outlet_Type', aggfunc = (lambda x: x.mode()[0]))

print(outlet_size_mode) #print in pivot table

#we cannot take the mode for the column Outlet_Size only - incorrect method
#so we take the mode value for Outlet_Size column based on the Outlet_Type column since both columns are correlated

#for example, for Outlet_Type Grocery store, the mode for the Outlet_Size is Small
#for example, for Outlet_Type Supermarket Type1, the mode for the Outlet_Size is Small
#for example, for Outlet_Type Supermarket Type2, the mode for the Outlet_Size is Medium
#for example, for Outlet_Type Supermarket Type3, the mode for the Outlet_Size is Medium

missing_values = mart_data['Outlet_Size'].isnull()

print(missing_values)

mart_data.loc[missing_values, 'Outlet_Size'] = mart_data.loc[missing_values, 'Outlet_Type'].apply(lambda x: outlet_size_mode[x])

mart_data.isnull().sum()

"""Data Analysis"""

mart_data.describe()

"""1. Numerical Features"""

sns.set()

#Item_Weight distribution

plt.figure(figsize = (6,6))
sns.distplot(mart_data['Item_Weight'])
plt.show()

#Item_Visibility distribution

plt.figure(figsize = (6,6))
sns.distplot(mart_data['Item_Visibility'])
plt.show()

#Item_MRP distribution

plt.figure(figsize = (6,6))
sns.distplot(mart_data['Item_MRP'])
plt.show()

#Item_Outlet_Sales distribution

plt.figure(figsize = (6,6))
sns.distplot(mart_data['Item_Outlet_Sales'])
plt.show()

#Outlet_Establishment_Year count plot

plt.figure(figsize = (6,6))
sns.countplot(x = 'Outlet_Establishment_Year', data = mart_data)
plt.show()

"""2. Categorical Features"""

#Item_Fat_Content count plot

plt.figure(figsize = (6,6))
sns.countplot(x = 'Item_Fat_Content', data = mart_data)
plt.show()

#need to clean the data
#example - we need to combine Low Fat with low fat and LF
#example - we need to combine Regular with reg

#Item_Type count plot

plt.figure(figsize = (25,6))
sns.countplot(x = 'Item_Type', data = mart_data)
plt.show()

#Outlet_Size count plot

plt.figure(figsize = (6,6))
sns.countplot(x = 'Outlet_Size', data = mart_data)
plt.show()

"""Data Pre-Processing - Continuation"""

#combine Low Fat with low fat and LF & combine Regular with reg

mart_data['Item_Fat_Content'].value_counts()

mart_data.replace({'Item_Fat_Content' : {'low fat' : 'Low Fat', 'LF' : 'Low Fat', 'reg' : 'Regular'}}, inplace = True)

mart_data['Item_Fat_Content'].value_counts()

"""1. Label Encoding"""

encoder = LabelEncoder()

mart_data['Item_Identifier'] = encoder.fit_transform(mart_data['Item_Identifier'])

mart_data['Item_Fat_Content'] = encoder.fit_transform(mart_data['Item_Fat_Content'])

mart_data['Item_Type'] = encoder.fit_transform(mart_data['Item_Type'])

mart_data['Outlet_Identifier'] = encoder.fit_transform(mart_data['Outlet_Identifier'])

mart_data['Outlet_Size'] = encoder.fit_transform(mart_data['Outlet_Size'])

mart_data['Outlet_Location_Type'] = encoder.fit_transform(mart_data['Outlet_Location_Type'])

mart_data['Outlet_Type'] = encoder.fit_transform(mart_data['Outlet_Type'])

mart_data.head()

"""2. Splitting Features & Target"""

X = mart_data.drop(columns = 'Item_Outlet_Sales', axis = 1)
Y = mart_data['Item_Outlet_Sales']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - XGBoost Regressor Model"""

regressor = XGBRegressor()

regressor.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy on training data

X_train_prediction = regressor.predict(X_train)
X_train_accuracy = metrics.r2_score(X_train_prediction, Y_train)

print(X_train_accuracy)

#accuracy on test data

X_test_prediction = regressor.predict(X_test)
X_test_accuracy = metrics.r2_score(X_test_prediction, Y_test)

print(X_test_accuracy)