# -*- coding: utf-8 -*-
"""Project 16 - Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w1euhFgF6nE1OBy31KMxqA6_f1nlxe5H

1.  To detect a credit card transaction is legit or fraud - Binary Classification Problem
2.  ML Model - Logistic Regression Model (Supervised ML)
3.  Work Flow

    *   Collect Credit Card Transaction Data (highly unbalanced) - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis
    *   Train-Test Split
    *   Machine Learning Training - Logistic Regression Model (Supervised ML)

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Pre-Processing"""

credit_data = pd.read_csv('/content/credit_data.csv')

credit_data.head()

credit_data.tail()

credit_data.shape

credit_data.info()

credit_data.isnull().sum()

# distribution of legit transaction & fraudulent transaction

credit_data['Class'].value_counts()

"""0 --> Legit Transaction

1 --> Fraud Transaction
"""

# separating the data for analysis

legit = credit_data[credit_data.Class == 0]
fraud = credit_data[credit_data.Class == 1]

print(legit.shape)
print(fraud.shape)

# statistical measures of the legit data

legit.Amount.describe()

# statistical measures of the fraud data

fraud.Amount.describe()

# compare the values for both transactions

credit_data.groupby('Class').mean()

"""Handling Unbalanced Data

* Under Sampling
"""

legit_sample = legit.sample(n=492) # take a total of n=492 random sample from 'legit' data

new_data = pd.concat([legit_sample, fraud], axis=0)

new_data.head()

new_data.tail()

new_data.shape

new_data['Class'].value_counts()

new_data.groupby('Class').mean()

X = new_data.drop(columns='Class', axis=1)
Y = new_data['Class']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - Logistic Regression Model"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data

train_data_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(Y_train, train_data_prediction)
print('Training data accuracy = ', train_data_accuracy)

# accuracy on test data

test_data_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, test_data_prediction)
print('Test data accuracy = ', test_data_accuracy)