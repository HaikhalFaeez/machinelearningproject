# -*- coding: utf-8 -*-
"""Project 6 - Loan Status Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dnCYk063p6_rBnVD_QS1BryafYpAuLLk

1.  To identify whether the person is eligible for a loan or not - Binary Classification Problem
2.  ML Model - Support Vector Machine (SVM) Model (Supervised ML)
3.  Work Flow
    *   Collect Loan Status Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Visualization
    *   Train-Test Split
    *   Machine Learning Training - Support Vector Machine (SVM) Model (Supervised ML)
    *   Develop Prediction System - Feed new data to the trained model to predict the eligibility of the person for a loan (approved or rejected)

Import the Dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Pre-Processing"""

loan_data = pd.read_csv('/content/loan_data.csv')

loan_data.head()

loan_data.shape

loan_data.describe()

loan_data.isnull().sum()

#dropping the missing values

loan_data = loan_data.dropna()

loan_data.isnull().sum()

loan_data.shape

#Label Encoding - pandas method

loan_data.replace({"Loan_Status":{'N':0, 'Y':1}}, inplace=True)

loan_data.head()

#dependent values
loan_data['Dependents'].value_counts()

#replacing the value 3+ to 4 (integer)

loan_data = loan_data.replace(to_replace='3+', value=4)

loan_data['Dependents'].value_counts()

"""Data Visualisation"""

#education and loan status

sns.countplot(x='Education', hue='Loan_Status', data=loan_data)

#marital and loan status

sns.countplot(x='Married', hue='Loan_Status', data=loan_data)

#convert categorical columns with numerical values

loan_data.replace({'Married':{'No':0, 'Yes':1}, 'Gender':{'Male':1, 'Female':0}, 'Self_Employed':{'No':0, 'Yes':1},
                   'Property_Area':{'Rural':0, 'Semiurban':1, 'Urban':2}, 'Education':{'Graduate':1, 'Not Graduate':0}}, inplace=True)

loan_data.head()

X = loan_data.drop(columns=['Loan_ID','Loan_Status'], axis=1) #axis=1 remove the whole columns #axis=0 remove the whole row
Y = loan_data['Loan_Status']

print(X)
print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - Support Vector Machine (SVM) model"""

classifier = svm.SVC(kernel='linear') #support vector machine.Support Vector Classifier

classifier.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy on training data

X_train_prediction = classifier.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print(X_train_accuracy)

#accuracy on test data

X_test_prediction = classifier.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print(X_test_accuracy)

"""Making A Predictive System"""

input_data = (1,1,0,0,0,2583,2358.0,120.0,360.0,1.0,2)

#change the input data to a numpy array

input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only on instance (1 data point)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#Predictive system

prediction = classifier.predict(input_data_reshaped)
print (prediction)

if (prediction[0]==0):
  print('The person is not eligible for the loan')
else:
  print('The person is eligible for the loan')