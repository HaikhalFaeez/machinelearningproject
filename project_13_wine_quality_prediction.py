# -*- coding: utf-8 -*-
"""Project 13 - Wine Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p_D9cfvT_epcYdB-GbPAoEF9c4r4llHJ

1.  To predict quality the new brand of wine using several parameters such as acidity, sugar content and others - Classification Problem
2.  ML Model - Random Forest Classifier Model (Supervised ML)
2.  Work Flow

    *   Collect Wine Quality Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis & Visualization
    *   Train-Test Split
    *   Machine Learning Training - Random Forest Classifier Model (Supervised ML)
    *   Develop Prediction System - Feed new wine data to the trained model to predict the quality of the wine

Import the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data Collection & Pre-Processing"""

wine_data = pd.read_csv('/content/WineQT.csv')

wine_data.shape

wine_data.head()

wine_data.tail()

wine_data.isnull().sum()

"""Data Analysis & Visualization"""

wine_data.describe()

# number of values for each quality

sns.catplot(x='quality', data=wine_data, kind='count') # category plot

# volatile acidity vs quality plot

plt.figure(figsize=(5,5))

sns.barplot(x='quality', y='volatile acidity', data=wine_data)

# citric acid vs quality plot

plt.figure(figsize=(5,5))

sns.barplot(x='quality', y='citric acid', data=wine_data)

"""Correlation"""

correlation = wine_data.corr()

# constructing a heat map

plt.figure(figsize=(10,10))

sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

X = wine_data.drop(['quality','Id'], axis=1)
Y = wine_data['quality']

print(X)

"""Label Binarization

* quality 3, 4, 5, 6 --> 0
* qaulity 7, 8 --> 1
"""

Y = wine_data['quality'].apply(lambda y_value: 1 if y_value >= 7 else 0)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(Y.shape, Y_train.shape, Y_test.shape)

"""Machine Learning Training - Random Forest Classifier Model"""

model = RandomForestClassifier()

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('The training data accuracy = ', training_data_accuracy)

# accuracy on test data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('The test data accuracy = ', test_data_accuracy)

"""Predictive System"""

input_data = (10.3,0.32,0.45,6.4,0.073,5.0,13.0,0.9976,3.23,0.82,12.6)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 1):
  print('The wine quality is Good')

else:
  print('The wine quality is Bad')