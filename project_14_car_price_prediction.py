# -*- coding: utf-8 -*-
"""Project 14 - Car Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bam_js-cxVxi0dlwz1ppGKbt6hABiA0A

1.  To predict the price of the used car - Regression Problem
2.  ML Model - Linear & Lasso Model (Supervised ML)
2.  Work Flow

    *   Collect Car Price Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Train-Test Split
    *   Machine Learning Training - Linear & Lasso Model (Supervised ML)

Import the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection & Pre-Processing"""

car_data = pd.read_csv('/content/car data.csv')

car_data.head()

car_data.shape

car_data.info()

car_data.isnull().sum()

# checking the distribution of categorical data

print(car_data['fuel'].value_counts())
print(car_data['seller_type'].value_counts())
print(car_data['transmission'].value_counts())
print(car_data['owner'].value_counts())

"""Label Encoding - Categorical Data"""

# label encoding 'fuel' columns
car_data.replace({'fuel':{'Diesel':0, 'Petrol':1, 'CNG':2, 'LPG':3, 'Electric':4}}, inplace = True)

# label encoding 'seller_type' columns
car_data.replace({'seller_type':{'Individual':0, 'Dealer':1, 'Trustmark Dealer':2}}, inplace = True)

# label encoding 'transmission' columns
car_data.replace({'transmission':{'Manual':0, 'Automatic':1}}, inplace = True)

# label encoding 'owner' columns
car_data.replace({'owner':{'First Owner':0, 'Second Owner':1, 'Third Owner':2, 'Fourth & Above Owner':3, 'Test Drive Car':4}}, inplace = True)

car_data.head()

X = car_data.drop(['name', 'selling_price'], axis=1)
Y = car_data['selling_price']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - Linear Regression Model"""

lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train, Y_train)

"""Model Evaluation - Linear Regression Model"""

# accuracy on training data

train_data_prediction = lin_reg_model.predict(X_train)
train_data_accuracy = metrics.r2_score(Y_train, train_data_prediction)
print('The accuracy on training data = ', train_data_accuracy)

# accuracy on test data

test_data_prediction = lin_reg_model.predict(X_test)
test_data_accuracy = metrics.r2_score(Y_test, test_data_prediction)
print('The accuracy on test data = ', test_data_accuracy)

"""Visualization - Linear Regression Model"""

# training data plot

plt.scatter(Y_train, train_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# test data plot

plt.scatter(Y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

"""Machine Learning Training - Lasso Regression Model"""

lasso_reg_model = Lasso()

lasso_reg_model.fit(X_train, Y_train)

"""Model Evaluation - Lasso Regression Model"""

# accuracy on training data

train_data_prediction = lasso_reg_model.predict(X_train)
train_data_accuracy = metrics.r2_score(Y_train, train_data_prediction)
print('The accuracy on training data = ', train_data_accuracy)

# accuracy on test data

test_data_prediction = lasso_reg_model.predict(X_test)
test_data_accuracy = metrics.r2_score(Y_test, test_data_prediction)
print('The accuracy on test data = ', test_data_accuracy)

"""Visualization - Lasso Regression Model"""

# training data plot

plt.scatter(Y_train, train_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# test data plot

plt.scatter(Y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()