# -*- coding: utf-8 -*-
"""Project 3 - Spam Mail Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p-U4Gstf9abzzqF5fhX4k7_WX_wMtHt1

1. To detect whether the mail is a spam mail or non-spam mail (ham mail) (Determine the mail would sent to inbox or spam bin) - Binary Classification Problem
2. ML Model - Logistic Regression Model (Supervised ML)
3. Work Flow
   * Collect Mail Data - Kaggle Dataset
   * Data Pre-Processing
   * Train-Test Split
   * Feature Extraction
   * Machine Learning Training - Logistic Regression Model (Supervised ML)
   * Develop Prediction System - Feed new data to the trained model to predict the mail type

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Pre-Processing"""

raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# replace the null values with null string

mail_data = raw_mail_data.where((pd.notnull)(raw_mail_data),' ')

mail_data.head()

mail_data.head()

mail_data.shape

"""Label Encoding"""

#label spam mail as 0 and ham mail as 1

mail_data.loc[mail_data['Category'] == 'spam', 'Category'] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category'] = 1
print(mail_data)

X = mail_data['Message']
Y = mail_data['Category']

print(X)
print(Y)

mail_data['Category'].value_counts()

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=3)

print(X.shape, X_train.shape, X_test.shape)

"""Feature Extraction"""

# transform textual data to feature vectors (numerical values) that can be used as input in Logistic Regression

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

# min_df = 1 : minimum number of word repetitions - meaning if a word only appears once in a mail, just ignore it, while
# if the word appears twice or more, consider it.
# stop_words = 'english' : ignore the common meaningless english words - I, we, you, is, the, are, his, her, etc...
# lowercase = True : convert all capital letters to lower case letter to ease the processing

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_features)

"""Machine Learning Training - Logistic Regression Model"""

model = LogisticRegression()

# training the logistic regression model with training data

model.fit(X_train_features, Y_train)

"""Model Evaluation"""

# accuracy on the training data

X_train_prediction = model.predict(X_train_features)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)

print('The accuracy of training data : ', X_train_accuracy)

# accuracy on the test data

X_test_prediction = model.predict(X_test_features)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)

print('The accuracy of test data : ', X_test_accuracy)

"""Making A Predictive System"""

input_mail = ["Is that seriously how you spell his name?"]

# convert text to feature vectors
input_features = feature_extraction.transform(input_mail)

# making prediction
prediction = model.predict(input_features)
print(prediction)

if (prediction[0] == 0):
  print('The mail is spam mail')
else:
  print('The mail is ham mail')