# -*- coding: utf-8 -*-
"""Project 18 - Parkinson's Disease Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ry6hLebxx_uLmA4X91upTtnzhg7hwCgl

1.  To detect early parkinson's disease on a patient - Classification Problem
2.  ML Model - Support Vector Machine (SVM) Classifier Model (Supervised ML)
3.  Work Flow

    *   Collect Parkinson's Patient Data
    *   Data Pre-Processing
    *   Train-Test Split
    *   Machine Learning Training - Support Vector Machine (SVM) Classifier Model (Supervised ML)
    *   Develop Prediction System - Feed new data to the trained model to detect parkinson's disease on a patient (healthy or have parkinson)

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection & Pre-Processing"""

park_data = pd.read_csv('/content/parkinsons.csv')

park_data.head()

park_data.tail()

park_data.shape

park_data.info()

park_data.isnull().sum()

park_data.describe()

park_data['status'].value_counts()

"""0 --> Healthy

1 --> Unhealthy with Parkinson Disease
"""

park_data.groupby('status').mean(numeric_only=True) ############################################## new knowledge

X = park_data.drop(columns = ['name', 'status'], axis = 1)
Y = park_data['status']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Standardisation"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

print(X_train)

"""Machine Learning Training - Support Vector Machine (SVM) Classifier Model"""

model = svm.SVC(kernel = 'linear')

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data

train_data_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(Y_train, train_data_prediction)
print('Training data accuracy = ', train_data_accuracy)

# accuracy on test data

test_data_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, test_data_prediction)
print('Test data accuracy = ', test_data_accuracy)

"""Predictive System"""

input_data = (203.18400,211.52600,196.16000,0.00178,0.000009,0.00094,0.00106,0.00283,0.00958,0.08500,0.00468,0.00610,0.00726,0.01403,0.00065,33.04700,0.340068,0.741899,-7.964984,0.163519,1.423287,0.044539)

input_data_as_numpy_array = np.asarray(input_data) # convert data from tuple to numpy array

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is Healthy')

else:
  print('The person has Parkinson')