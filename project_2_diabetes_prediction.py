# -*- coding: utf-8 -*-
"""Project 2 - Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OpYRVNgAiSGL9_SSGfTyh1Pw2O5mGeeQ

1.   Predict a patient whether they have diabetes or not - Binary Classification Problem
2.   ML Model - Support Vector Machine (SVM) Classifier (Supervised ML)
3.   Work Flow
     *   Collect Diabetes Data - Kaggle Dataset
     *   Data Pre-Processing
     *   Data Standardisation
     *   Train-Test Split
     *   Machine Learning Training - Support Vector Machine (SVM) Classifier Model (Supervised ML)
     *   Develop Prediction System - Feed new data to the trained model to predict the patient condition
     *   Saving the Trained Model in .sav File

Import the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Pre-Processing"""

diabetes_data = pd.read_csv('/content/diabetes.csv')

diabetes_data.head()

diabetes_data.shape

diabetes_data.describe()

diabetes_data['Outcome'].value_counts()

"""0 --> Non-Diabetes

1 --> Diabetes
"""

diabetes_data.groupby('Outcome').mean()

X = diabetes_data.drop(columns='Outcome', axis=1)
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Data Standardisation"""

scaler = StandardScaler()

scaler.fit(X)
X_standardised = scaler.transform(X)
print(X_standardised)

X = X_standardised
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - Support Vector Machine (SVM) Classifier Model"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine classifier

classifier.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on the training data

X_train_prediction = classifier.predict(X_train)
X_train_accuracy = accuracy_score(X_train_prediction, Y_train)
print('The accuracy on the training data : ', X_train_accuracy)

# accuracy on the test data

X_test_prediction = classifier.predict(X_test)
X_test_accuracy = accuracy_score(X_test_prediction, Y_test)
print('The accuracy on the test data : ', X_test_accuracy)

"""Making A Prediction System"""

input_data = (2,197,70,45,543,30.5,0.158,53)

# changing the input data to a numpy array
new_input_data = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance
reshaped_data = new_input_data.reshape(1,-1)

# standardised the input data
std_data = scaler.transform(reshaped_data)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

"""Saving the Trained Model"""

import pickle

filename = 'diabetes_model.sav'

pickle.dump(classifier, open(filename, 'wb')) # w = write, b = binary

# load the saved model
diabetes_model = pickle.load(open('diabetes_model.sav', 'rb')) #r = read

input_data = (4,110,92,0,0,37.6,0.191,30)

# changing the input data to a numpy array
new_input_data = np.asarray(input_data)

# reshape the numpy array as we are predicting for one instance
reshaped_data = new_input_data.reshape(1,-1)

# stadardised the input data
std_data = scaler.transform(reshaped_data)

prediction = diabetes_model.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')