# -*- coding: utf-8 -*-
"""Project 5 - House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VBuACM6C3nvVmA8yeGbNItakSWnIhDdU

1.  To predict the house price - Regression Problem
2.  ML Model - XGBoost Regressor Model (Supervised ML)
3.  Work Flow
    *   Collect House Price Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis - Determine the correlation between features
    *   Train-Test Split
    *   Machine Learning Training - XGBoost Regressor Model (Supervised ML)

Import the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data Collection and Pre-Processing"""

house_data = pd.read_csv('/content/boston.csv')

house_data.head()

house_data.shape

house_data = house_data.drop(columns=['Unnamed: 0'], axis=1)

house_data.head()

house_data.shape

# understanding the correlation between various features in the dataset

correlation = house_data.corr()

# constructing heatmap

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.2f', annot=True, annot_kws={'size':8}, cmap='Blues')

# cbar=True : cbar(colour bar), True(put the colour bar at the side)
# sqaure=True : square shaped
# fmt='.1f' : 1 decimal point
# annot=True : annot(annotation=numbers/labels/etc...), True(put the annotation on the map=numbers/labels/etc...)
# annot_kws={'size':8} : size of annotation of 8 ~ somewhat similar to font size
# cmap='Blues' : the heat map is in blue colour

X = house_data.drop(columns=['PRICE'], axis=1)
Y = house_data['PRICE']

print(X)
print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - XGBoost Regressor Model"""

model = XGBRegressor()

# traning the model with training data

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on the training data

X_train_prediction = model.predict(X_train)
accuracy_1 = metrics.r2_score(Y_train, X_train_prediction)
accuracy_2 = metrics.mean_absolute_error(Y_train, X_train_prediction)
print(accuracy_1, accuracy_2)

# visualising the actual prices and predicted prices

plt.scatter(Y_train, X_train_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show

# accuracy on the test data

X_test_prediction = model.predict(X_test)
accuracy_3 = metrics.r2_score(Y_test, X_test_prediction)
accuracy_4 = metrics.mean_absolute_error(Y_test, X_test_prediction)
print(accuracy_3, accuracy_4)

# visualising the actual prices and predicted prices

plt.scatter(Y_test, X_test_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show

