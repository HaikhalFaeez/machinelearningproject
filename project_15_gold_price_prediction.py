# -*- coding: utf-8 -*-
"""Project 15 - Gold Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Olhvj0PN8gmQ_a4EASNPBTyYEZMjBNxx

1.  To predict the gold price based on the price for the last 10 years - Regression Problem
2.  ML Model - Random Forest Regressor Model (Supervised ML)
3.  Work Flow

    *   Collect Gold Price Data (for the last 10 years) - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis
    *   Train-Test Split
    *   Machine Learning Training - Random Forest Regressor Model (Supervised ML)

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""Data Collection & Pre-Processing"""

gold_data = pd.read_csv('/content/gld_price_data.csv')

gold_data.head()

gold_data.tail()

gold_data.shape

gold_data.info()

gold_data.isnull().sum()

gold_data.describe()

"""Correlation - Often done for regression problem"""

gold_data['Date'] = pd.to_datetime(gold_data['Date'])

correlation = gold_data.corr()

plt.figure(figsize=(5,5))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

# correlation values of GLD

print(correlation['GLD'])

# checking the distribution of the GLD price

sns.displot(gold_data['GLD'], color='green')

X = gold_data.drop(['Date', 'GLD'], axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

"""Machine Learning Training - Random Forest Regressor Model"""

model = RandomForestRegressor(n_estimators=100)

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on test data

test_data_prediction = model.predict(X_test)
test_data_accuracy = metrics.r2_score(Y_test, test_data_prediction)
print('Test data accuracy = ', test_data_accuracy)

# compare actual values and Predicted value in plot

Y_test = list(Y_test)

plt.plot(Y_test, color='blue', label='Actual Value')
plt.plot(test_data_prediction, color='green', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('Gold Price')
plt.legend()
plt.show()