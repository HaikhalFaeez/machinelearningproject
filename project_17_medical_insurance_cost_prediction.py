# -*- coding: utf-8 -*-
"""Project 17 - Medical Insurance Cost Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YC6vRcjq7PFJRQLqua20NOpGFzNEqfAd

1.  To predict the medical insurance cost of a patient from an insurance company - Regression Problem
2.  ML Model - Linear Regression Model (Supervised ML)
3.  Work Flow

    *   Collect Insurance Cost Data - Kaggle Dataset
    *   Data Analysis
    *   Data Pre-Processing
    *   Train-Test Split
    *   Machine Learning Training - Linear Regression Model (Supervised ML)
    *   Develop Prediction System - Feed new data to the trained model to predict the cost of a medical insurance of a patient

Import the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data Collection & Pre-Processing"""

insurance_data = pd.read_csv('/content/insurance.csv')

insurance_data.head()

insurance_data.tail()

insurance_data.shape

insurance_data.info()

insurance_data['region'].value_counts()

insurance_data.isnull().sum()

"""Data Analysis"""

insurance_data.describe()

# distribution of age value

sns.set()
plt.figure(figsize=(6,6))
sns.displot(insurance_data['age'])
plt.title('Distribution of Age')
plt.show()

# distribution of gender value

plt.figure(figsize=(6,6))
sns.countplot(insurance_data['sex']) # == sns.countplot(x='sex', data=insurance_data)
plt.title('Distribution of Gender')
plt.show()

insurance_data['sex'].value_counts()

# distribution of bmi value

plt.figure(figsize=(6,6))
sns.displot(insurance_data['bmi'])
plt.title('Distribution of BMI')
plt.show()

# distribution of children value

plt.figure(figsize=(6,6))
sns.countplot(x='children', data=insurance_data)
plt.title('Distribution of Children')
plt.show()

insurance_data['children'].value_counts()

# distribution of smoker value

plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=insurance_data)
plt.title('Distribution of Smoker')
plt.show()

insurance_data['smoker'].value_counts()

# distribution of region value

plt.figure(figsize=(6,6))
sns.countplot(x='region', data=insurance_data)
plt.title('Distribution of Region')
plt.show()

insurance_data['region'].value_counts()

# distribution of charges value

plt.figure(figsize=(6,6))
sns.displot(insurance_data['charges'])
plt.title('Distribution of Charges')
plt.show()

"""Data Pre-Processing - Continuation"""

# Label Encoding

insurance_data.replace({'sex':{'male':0, 'female':1}}, inplace=True)
insurance_data.replace({'smoker':{'yes':0, 'no':1}}, inplace=True)
insurance_data.replace({'region':{'southeast':0, 'southwest':1, 'northwest':2, 'northeast':3}}, inplace=True)

X = insurance_data.drop(columns='charges', axis=1)
Y = insurance_data['charges']

print(X)

print(Y)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Machine Learning Training - Linear Regression Model"""

model = LinearRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data

train_data_prediction = model.predict(X_train)
train_data_accuracy = metrics.r2_score(Y_train, train_data_prediction)
print('Training data accuracy = ', train_data_accuracy)

# accuracy on test data

test_data_prediction = model.predict(X_test)
test_data_accuracy = metrics.r2_score(Y_test, test_data_prediction)
print('Test data accuracy = ', test_data_accuracy)

"""Predictive System"""

input_data = (31,1,25.74,0,1,0)

input_data_as_numpy_array = np.asarray(input_data) # change tuple to numpy array

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print('The insurance cost is $', prediction[0])