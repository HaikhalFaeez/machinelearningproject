# -*- coding: utf-8 -*-
"""Project 11 - Customer Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xyaaaFmT12AmkK_g2FOS_rfNF0ARGNUD

1.  Customer Segmentation

    * To group customer based on their spending pattern and purchase behaviour
    * This data can provide the company to make a better bussiness decision / judgement

2.  Clustering Problem

3.  ML Model - K-Means Clustering (Unsupervised ML)

4.  Work Flow

    *   Collect Customer Data - Kaggle Dataset
    *   Data Pre-Processing
    *   Data Analysis
    *   Optimum number of cluster using Within Cluster Sum of Square (WCSS)
    *   Machine Learning Training - K-Means Clustering (Unsupervised ML)
        - can group the data depending on the similarities of the parameters
    *   Data Visualization - K-Means Clustering plot

Import the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data Collection & Pre-Processing"""

customer_data = pd.read_csv('/content/Mall_Customers.csv')

customer_data.head()

customer_data.shape

customer_data.info()

customer_data.isnull().sum()

#extracting important columns

X = customer_data.iloc[:, [3,4]].values

print(X)

"""Choosing the Number of Cluster using WCSS

* Within Cluster Sum of Square (WCSS)
"""

#finding wcss value for different number of clusters

wcss = []

for i in range (1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

#plot an elbow graph

sns.set()

plt.plot(range(1,11), wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

#to determine the best cluster number, we have to look for elbow points (the point where the graph had a sudden change == somelike a corner)
#this graph have 2 elbow at cluster 3 and cluster 5
#to determine the best number of cluster between these 2 elbow, choose the lowest wcss value - in this case, the elbow 5 was choosen

"""The optimum number of clusters = 5

Machine Learning Training - K-Means Clustering
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

#return a label for each data points based on their cluster

Y = kmeans.fit_predict(X)

print(Y)

#for each data points, the respective cluster was assigned to them
#for example, for data points with cluster 0 is one cluster, for data points with cluster 1 is another cluster, and so on...

"""Data Visualization"""

#plotting all the cluster and their centroids

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='blue', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='red', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='yellow', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='violet', label='Cluster 5')

#plot the centroid

plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroid')

plt.title('Customer Group')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()