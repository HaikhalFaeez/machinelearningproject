# -*- coding: utf-8 -*-
"""Project 10 - Movie Recommended System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sCFyHBpWJWOixjC23smjBo1TvlMLvzlo

1.  Movie Recommended System

    * Content Based Recommended System
      
      - The system recommendation is based on the user content (i.e. watched movie before, most searched, genre, theme, etc...)

    * Popularity Based Recommended System

      - The system recommendation is based on the popularity of the movies (i.e. top 10 movies..., high rating, cast, director, theme, genre, etc...)

    * Collaborative Recommended System

      - The system recommendation is based on the watched movies by a other group of people (i.e. for the new user, if the movie interest is similar to the group of people, the movie recommended were basically based the watched movies by this group of people with similar interest)

2.  To construct a movie recommendation system for the user

3.  Work Flow

    *   Collect data of the movies (movie description, genre, director, cast, plot, etc...)(mostly in a form of textual data)
    *   Data Pre-Processing
    *   Feature Extraction (convert textual data to numerical data)
    *   Similarity Confidence - find the similarity between the movies from the data
    *   Obtain user input (user type what movie they wanted to watch)
    *   Cosine Similarity Algorithm (to recommend movies with similar to the movie from the user input) (Output - list of Movies)
    *   Output - list of Movies

Import the Dependencies
"""

import numpy as np
import pandas as pd
import difflib #when the user try to search a movie by input the movie name, the system can recommended various similar movie to the one user input.
               #However, user can make spelling mistake / not know the exact title of a movie, when search for the movie, so, the system will try to
               #find the closest match to the user input from the training data.
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data Collection & Pre-Processing"""

movies_data = pd.read_csv('/content/movies.csv')

movies_data.head()

movies_data.shape

#selecting the relevant features for recommendation

selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']
print(selected_features)

#replacing the missing values with null string

for feature in selected_features:

  movies_data[feature] = movies_data[feature].fillna('')

#combining all the 5 selected features

combined_features = movies_data['genres'] + ' ' + movies_data['keywords'] + ' ' + movies_data['tagline'] + ' ' + movies_data['cast'] + ' ' + movies_data['director']

print(combined_features)

"""Feature Extraction - convert textual data to numerical data"""

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

#getting the similarity score using cosine similarity

similarity = cosine_similarity(feature_vectors)

print(similarity)

similarity.shape

"""Movie Recommendation System"""

#getting the movie name from the user

movie_name = input('Enter movie name : ')

#creating a list with all the movie names given in the dataset

title_list = movies_data['title'].tolist()
print(title_list)

#finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, title_list)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

#finding the index of the movie based on the title

movie_index = movies_data[movies_data.title == close_match]['index'].values[0]
print(movie_index)

#getting the list of similar movies based on the index value

similarity_score = list(enumerate(similarity[movie_index]))
print(similarity_score)

len(similarity_score)

#sorting the movies based on their similarity score

sorted_similarity_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) #reverse - desending order
print(sorted_similarity_movies)

#print the name of similar movies based on the index

print('Movie Suggestion : \n')

i = 1

for movie in sorted_similarity_movies:

  index = movie[0]

  title_from_index = movies_data[movies_data.index==index]['title'].values[0]

  if (i < 10):

    print(i, '. ', title_from_index)

    i += 1

"""Movie Recommendation System"""

#complete movie recommendation system code

movie_name = input('Enter movie name : ')

title_list = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, title_list)

close_match = find_close_match[0]

movie_index = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[movie_index]))

sorted_similarity_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movie Suggestion : \n')

i = 1

for movie in sorted_similarity_movies:

  index = movie[0]

  title_from_index = movies_data[movies_data.index==index]['title'].values[0]

  if (i < 10):

    print(i, '. ', title_from_index)

    i += 1